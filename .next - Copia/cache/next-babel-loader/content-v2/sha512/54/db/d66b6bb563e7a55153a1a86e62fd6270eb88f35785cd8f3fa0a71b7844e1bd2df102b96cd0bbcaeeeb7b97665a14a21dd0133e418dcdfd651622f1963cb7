{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\brn93\\\\moveit-netx2\\\\src\\\\contexts\\\\CountdownContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengeContext } from \"./ChallengeContext\";\nexport var CountdownContext = /*#__PURE__*/createContext({});\nvar countdownTimeout;\nexport function CountdownProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(ChallengeContext),\n      startNewChallenge = _useContext.startNewChallenge;\n\n  var _useState = useState(25 * 60),\n      time = _useState[0],\n      setTime = _useState[1];\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1];\n\n  var minutes = Math.floor(time / 60);\n  var seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(25 * 60);\n    setHasFinished(false);\n  }\n\n  useEffect(function () {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time == 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes: minutes,\n      seconds: seconds,\n      hasFinished: hasFinished,\n      isActive: isActive,\n      startCountdown: startCountdown,\n      resetCountdown: resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CountdownProvider, \"0n0KOXkGvPn+snxXOzuXvbBqe4U=\");\n\n_c = CountdownProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvider\");","map":{"version":3,"sources":["C:/Users/brn93/moveit-netx2/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengeContext","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAAyDC,QAAzD,QAAyE,OAAzE;AAEA,SAASC,gBAAT,QAAiC,oBAAjC;AAgBA,OAAO,IAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AACP,IAAIM,gBAAJ;AAEA,OAAO,SAASC,iBAAT,OAA+D;AAAA;;AAAA,MAAlCC,QAAkC,QAAlCA,QAAkC;;AAAA,oBACtCP,UAAU,CAACG,gBAAD,CAD4B;AAAA,MAC3DK,iBAD2D,eAC3DA,iBAD2D;;AAAA,kBAI9CN,QAAQ,CAAC,KAAG,EAAJ,CAJsC;AAAA,MAI5DO,IAJ4D;AAAA,MAIvDC,OAJuD;;AAAA,mBAKrCR,QAAQ,CAAC,KAAD,CAL6B;AAAA,MAK3DS,QAL2D;AAAA,MAKlDC,WALkD;;AAAA,mBAM/BV,QAAQ,CAAC,KAAD,CANuB;AAAA,MAM3DW,WAN2D;AAAA,MAM/CC,cAN+C;;AAQlE,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAC,EAAhB,CAAhB;AACA,MAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAAyB;AACrBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACP;;AAED,WAASQ,cAAT,GAAyB;AACrBC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AACAO,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,KAAG,EAAJ,CAAP;AACAI,IAAAA,cAAc,CAAC,KAAD,CAAd;AACH;;AAEDb,EAAAA,SAAS,CAAC,YAAI;AACV,QAAGU,QAAQ,IAAIF,IAAI,GAAC,CAApB,EAAsB;AAClBJ,MAAAA,gBAAgB,GAAGiB,UAAU,CAAC,YAAI;AAC9BZ,QAAAA,OAAO,CAACD,IAAI,GAAC,CAAN,CAAP;AACH,OAF4B,EAE3B,IAF2B,CAA7B;AAGH,KAJD,MAIQ,IAAIE,QAAQ,IAAIF,IAAI,IAAE,CAAtB,EAAwB;AAC5BK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AACpB;AACJ,GAVQ,EAUP,CAACG,QAAD,EAAUF,IAAV,CAVO,CAAT;AAYI,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAG;AAC/BM,MAAAA,OAAO,EAAPA,OAD+B;AAE/BG,MAAAA,OAAO,EAAPA,OAF+B;AAG/BL,MAAAA,WAAW,EAAXA,WAH+B;AAI/BF,MAAAA,QAAQ,EAARA,QAJ+B;AAK/BQ,MAAAA,cAAc,EAAdA,cAL+B;AAM/BC,MAAAA,cAAc,EAAdA;AAN+B,KAAnC;AAAA,cAQKb;AARL;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;GA9CeD,iB;;KAAAA,iB","sourcesContent":["import { createContext, ReactNode, useContext, useEffect,useState } from \"react\";\r\nimport { Countdown } from \"../components/Countdown\";\r\nimport { ChallengeContext } from \"./ChallengeContext\";\r\n\r\ninterface CountdownContextData {\r\n    minutes:number;\r\n    seconds:number;\r\n    hasFinished:boolean;\r\n    isActive: boolean;\r\n    startCountdown:()=>void;\r\n    resetCountdown:()=>void;\r\n\r\n}\r\n\r\ninterface CountdownProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const CountdownContext = createContext({} as CountdownContextData)\r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\nexport function CountdownProvider ({children}: CountdownProviderProps){\r\n    const {startNewChallenge} = useContext(ChallengeContext);\r\n    \r\n\r\n    const[time,setTime]=useState(25*60);\r\n    const [isActive,setIsActive]=useState(false);\r\n    const [hasFinished,setHasFinished]=useState(false);\r\n\r\n    const minutes = Math.floor(time/60);\r\n    const seconds = time % 60;\r\n\r\n    function startCountdown(){\r\n        setIsActive(true);\r\n}\r\n\r\nfunction resetCountdown(){\r\n    clearTimeout(countdownTimeout);\r\n    setIsActive(false);\r\n    setTime(25*60);\r\n    setHasFinished(false);\r\n}\r\n\r\nuseEffect(()=>{\r\n    if(isActive && time>0){\r\n        countdownTimeout = setTimeout(()=>{\r\n            setTime(time-1);\r\n        },1000)\r\n    }  else if (isActive && time==0){\r\n        setHasFinished(true);\r\n        setIsActive(false); \r\n        startNewChallenge();\r\n    }  \r\n},[isActive,time])\r\n\r\n    return (\r\n        <CountdownContext.Provider value ={{\r\n            minutes,\r\n            seconds,\r\n            hasFinished,\r\n            isActive,\r\n            startCountdown,\r\n            resetCountdown,\r\n        }}>\r\n            {children}\r\n        </CountdownContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}