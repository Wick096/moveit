{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\brn93\\\\moveit-netx2\\\\src\\\\contexts\\\\ChallengeContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengeContext = /*#__PURE__*/createContext({});\nexport function ChallengeProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(function () {\n    Notification.requestPermission();\n  }, []);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.random() * challenges.length;\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo desafio ', {\n        body: \"Valendo \".concat(challenge.amount, \".xp\")\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completedChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    var amount = activeChallenge.amount;\n    var finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengeContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      experienceToNextLevel: experienceToNextLevel,\n      challengesCompleted: challengesCompleted,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge,\n      resetChallenge: resetChallenge,\n      completedChallenge: completedChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallengeProvider, \"2xJW1fcLiz1uaXZ99HvMfcQqUg0=\");\n\n_c = ChallengeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengeProvider\");","map":{"version":3,"sources":["C:/Users/brn93/moveit-netx2/src/contexts/ChallengeContext.tsx"],"names":["createContext","useState","useEffect","challenges","ChallengeContext","ChallengeProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","levelUp","startNewChallenge","randomChallengeIndex","random","length","challenge","permission","body","amount","resetChallenge","completedChallenge","finalExperience"],"mappings":";;;;;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,EAA2CC,SAA3C,QAA2D,OAA3D;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AA0BA,OAAO,IAAMC,gBAAgB,gBAAGJ,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,SAASK,iBAAT,OAAsC;AAAA;;AAAA,MAAVC,QAAU,QAAVA,QAAU;;AAAA,kBAClBL,QAAQ,CAAC,CAAD,CADU;AAAA,MAClCM,KADkC;AAAA,MAC5BC,QAD4B;;AAAA,mBAEKP,QAAQ,CAAC,CAAD,CAFb;AAAA,MAEnCQ,iBAFmC;AAAA,MAEjBC,oBAFiB;;AAAA,mBAGST,QAAQ,CAAC,CAAD,CAHjB;AAAA,MAGnCU,mBAHmC;AAAA,MAGfC,sBAHe;;AAAA,mBAKEX,QAAQ,CAAC,IAAD,CALV;AAAA,MAKnCY,eALmC;AAAA,MAKnBC,kBALmB;;AAOzC,MAAMC,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAY,CAArB,EAAuB,CAAvB,CAA9B;AAGAL,EAAAA,SAAS,CAAC,YAAI;AACVgB,IAAAA,YAAY,CAACC,iBAAb;AACH,GAFQ,EAEN,EAFM,CAAT;;AAIF,WAASC,OAAT,GAAkB;AAChBZ,IAAAA,QAAQ,CAAED,KAAK,GAAE,CAAT,CAAR;AACD;;AAED,WAASc,iBAAT,GAA4B;AACxB,QAAMC,oBAAoB,GAAEN,IAAI,CAACO,MAAL,KAAcpB,UAAU,CAACqB,MAArD;AACA,QAAMC,SAAS,GAAGtB,UAAU,CAACmB,oBAAD,CAA5B;AAEAR,IAAAA,kBAAkB,CAACW,SAAD,CAAlB;;AAEA,QAAGP,YAAY,CAACQ,UAAb,KAA2B,SAA9B,EAAwC;AACpC,UAAIR,YAAJ,CAAkB,eAAlB,EAAkC;AAC9BS,QAAAA,IAAI,oBAAYF,SAAS,CAACG,MAAtB;AAD0B,OAAlC;AAGH;AACJ;;AAED,WAASC,cAAT,GAAyB;AACrBf,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASgB,kBAAT,GACA;AACE,QAAG,CAACjB,eAAJ,EAAoB;AAChB;AACH;;AAHH,QAKQe,MALR,GAKgBf,eALhB,CAKQe,MALR;AAOE,QAAIG,eAAe,GAAGtB,iBAAiB,GAAGmB,MAA1C;;AAEA,QAAGG,eAAe,IAAGhB,qBAArB,EAA2C;AACvCgB,MAAAA,eAAe,GAAGA,eAAe,GAAGhB,qBAApC;AACAK,MAAAA,OAAO;AACV;;AAEDV,IAAAA,oBAAoB,CAACqB,eAAD,CAApB;AACAjB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AAED;;AAEC,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAC9BJ,MAAAA,KAAK,EAALA,KAD8B;AAE9BE,MAAAA,iBAAiB,EAAjBA,iBAF8B;AAG9BM,MAAAA,qBAAqB,EAArBA,qBAH8B;AAI9BJ,MAAAA,mBAAmB,EAAnBA,mBAJ8B;AAK9BS,MAAAA,OAAO,EAAPA,OAL8B;AAM9BC,MAAAA,iBAAiB,EAAjBA,iBAN8B;AAO9BR,MAAAA,eAAe,EAAfA,eAP8B;AAQ9BgB,MAAAA,cAAc,EAAdA,cAR8B;AAS9BC,MAAAA,kBAAkB,EAAlBA;AAT8B,KAAlC;AAAA,cAWKxB;AAXL;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH;;GAxEeD,iB;;KAAAA,iB","sourcesContent":["import {createContext, useState,ReactNode, useEffect} from 'react';\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface Challenge {\r\n    type:'body'|'eye';\r\n    description:string;\r\n    amount:number;\r\n}\r\n\r\ninterface ChallengesContextData {\r\n    level:number;\r\n    currentExperience:number;\r\n    experienceToNextLevel:number;\r\n    challengesCompleted:number;\r\n    activeChallenge:Challenge;\r\n    levelUp:()=>void;\r\n    startNewChallenge:()=>void;\r\n    resetChallenge:()=>void;\r\n    completedChallenge:()=>void;\r\n}\r\n\r\ninterface ChallengeProviderProps{\r\n    children:ReactNode;\r\n}\r\n\r\n\r\n\r\nexport const ChallengeContext = createContext({}as ChallengesContextData);\r\n\r\nexport function ChallengeProvider({children}){\r\n    const [level,setLevel]=useState(1);\r\n    const[currentExperience,setCurrentExperience]=useState(0);\r\n    const[challengesCompleted,setChallengesCompleted]=useState(0);\r\n\r\n    const[activeChallenge,setActiveChallenge]= useState(null)\r\n\r\n    const experienceToNextLevel = Math.pow((level + 1)*4,2)\r\n\r\n\r\n    useEffect(()=>{\r\n        Notification.requestPermission();\r\n    }, [])\r\n\r\n  function levelUp(){\r\n    setLevel (level+ 1);\r\n  }\r\n\r\n  function startNewChallenge(){\r\n      const randomChallengeIndex=(Math.random()*challenges.length);\r\n      const challenge = challenges[randomChallengeIndex];\r\n\r\n      setActiveChallenge(challenge)\r\n\r\n      if(Notification.permission=== 'granted'){\r\n          new Notification ('Novo desafio ',{\r\n              body:`Valendo ${challenge.amount}.xp`\r\n          })\r\n      }\r\n  }\r\n\r\n  function resetChallenge(){\r\n      setActiveChallenge(null);\r\n  }\r\n\r\n  function completedChallenge()\r\n  {\r\n    if(!activeChallenge){\r\n        return;\r\n    }\r\n\r\n    const{amount}=activeChallenge;\r\n\r\n    let finalExperience = currentExperience + amount;\r\n\r\n    if(finalExperience>= experienceToNextLevel){\r\n        finalExperience = finalExperience - experienceToNextLevel;\r\n        levelUp();\r\n    }\r\n\r\n    setCurrentExperience(finalExperience);\r\n    setActiveChallenge(null);\r\n    setChallengesCompleted(challengesCompleted + 1);\r\n\r\n  }\r\n\r\n    return(\r\n        <ChallengeContext.Provider value={{\r\n            level,\r\n            currentExperience,\r\n            experienceToNextLevel,\r\n            challengesCompleted,\r\n            levelUp,\r\n            startNewChallenge,\r\n            activeChallenge,\r\n            resetChallenge,\r\n            completedChallenge,\r\n            }}>\r\n            {children}\r\n        </ChallengeContext.Provider>\r\n\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}