{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\brn93\\\\moveit-netx2\\\\src\\\\contexts\\\\ChallengeContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from '../../challenges.json';\nexport var ChallengeContext = /*#__PURE__*/createContext({});\nexport function ChallengeProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(function () {\n    Notification.requestPermission();\n  }, []);\n  useEffect(function () {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengesCompleted', String(challengesCompleted));\n  }, [level, currentExperience, challengesCompleted]);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.random() * challenges.length;\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n    new Audio('/notification.mp3').play();\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo desafio ', {\n        body: \"Valendo \".concat(challenge.amount, \".xp\")\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completedChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    var amount = activeChallenge.amount;\n    var finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengeContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      experienceToNextLevel: experienceToNextLevel,\n      challengesCompleted: challengesCompleted,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge,\n      resetChallenge: resetChallenge,\n      completedChallenge: completedChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallengeProvider, \"AareP/MOFgJ9M4IpBsMNtIv3Qb8=\");\n\n_c = ChallengeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengeProvider\");","map":{"version":3,"sources":["C:/Users/brn93/moveit-netx2/src/contexts/ChallengeContext.tsx"],"names":["createContext","useState","useEffect","Cookies","challenges","ChallengeContext","ChallengeProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","set","String","levelUp","startNewChallenge","randomChallengeIndex","random","length","challenge","Audio","play","permission","body","amount","resetChallenge","completedChallenge","finalExperience"],"mappings":";;;;;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,EAA2CC,SAA3C,QAA2D,OAA3D;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AA+BA,OAAO,IAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,SAASM,iBAAT,OAAsC;AAAA;;AAAA,MAAVC,QAAU,QAAVA,QAAU;;AAAA,kBAClBN,QAAQ,CAAC,CAAD,CADU;AAAA,MAClCO,KADkC;AAAA,MAC5BC,QAD4B;;AAAA,mBAEKR,QAAQ,CAAC,CAAD,CAFb;AAAA,MAEnCS,iBAFmC;AAAA,MAEjBC,oBAFiB;;AAAA,mBAGSV,QAAQ,CAAC,CAAD,CAHjB;AAAA,MAGnCW,mBAHmC;AAAA,MAGfC,sBAHe;;AAAA,mBAKEZ,QAAQ,CAAC,IAAD,CALV;AAAA,MAKnCa,eALmC;AAAA,MAKnBC,kBALmB;;AAOzC,MAAMC,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAY,CAArB,EAAuB,CAAvB,CAA9B;AAGAN,EAAAA,SAAS,CAAC,YAAI;AACViB,IAAAA,YAAY,CAACC,iBAAb;AACH,GAFQ,EAEN,EAFM,CAAT;AAIAlB,EAAAA,SAAS,CAAC,YAAM;AACZC,IAAAA,OAAO,CAACkB,GAAR,CAAY,OAAZ,EAAoBC,MAAM,CAACd,KAAD,CAA1B;AACAL,IAAAA,OAAO,CAACkB,GAAR,CAAY,mBAAZ,EAAgCC,MAAM,CAACZ,iBAAD,CAAtC;AACAP,IAAAA,OAAO,CAACkB,GAAR,CAAY,qBAAZ,EAAkCC,MAAM,CAACV,mBAAD,CAAxC;AAEH,GALQ,EAKP,CAACJ,KAAD,EAAOE,iBAAP,EAAyBE,mBAAzB,CALO,CAAT;;AAOF,WAASW,OAAT,GAAkB;AAChBd,IAAAA,QAAQ,CAAED,KAAK,GAAE,CAAT,CAAR;AACD;;AAED,WAASgB,iBAAT,GAA4B;AACxB,QAAMC,oBAAoB,GAAER,IAAI,CAACS,MAAL,KAActB,UAAU,CAACuB,MAArD;AACA,QAAMC,SAAS,GAAGxB,UAAU,CAACqB,oBAAD,CAA5B;AAEAV,IAAAA,kBAAkB,CAACa,SAAD,CAAlB;AAEA,QAAIC,KAAJ,CAAU,mBAAV,EAA+BC,IAA/B;;AAEA,QAAGX,YAAY,CAACY,UAAb,KAA2B,SAA9B,EAAwC;AACpC,UAAIZ,YAAJ,CAAkB,eAAlB,EAAkC;AAC9Ba,QAAAA,IAAI,oBAAYJ,SAAS,CAACK,MAAtB;AAD0B,OAAlC;AAGH;AACJ;;AAED,WAASC,cAAT,GAAyB;AACrBnB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASoB,kBAAT,GACA;AACE,QAAG,CAACrB,eAAJ,EAAoB;AAChB;AACH;;AAHH,QAKQmB,MALR,GAKgBnB,eALhB,CAKQmB,MALR;AAOE,QAAIG,eAAe,GAAG1B,iBAAiB,GAAGuB,MAA1C;;AAEA,QAAGG,eAAe,IAAGpB,qBAArB,EAA2C;AACvCoB,MAAAA,eAAe,GAAGA,eAAe,GAAGpB,qBAApC;AACAO,MAAAA,OAAO;AACV;;AAEDZ,IAAAA,oBAAoB,CAACyB,eAAD,CAApB;AACArB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AAED;;AAEC,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAC9BJ,MAAAA,KAAK,EAALA,KAD8B;AAE9BE,MAAAA,iBAAiB,EAAjBA,iBAF8B;AAG9BM,MAAAA,qBAAqB,EAArBA,qBAH8B;AAI9BJ,MAAAA,mBAAmB,EAAnBA,mBAJ8B;AAK9BW,MAAAA,OAAO,EAAPA,OAL8B;AAM9BC,MAAAA,iBAAiB,EAAjBA,iBAN8B;AAO9BV,MAAAA,eAAe,EAAfA,eAP8B;AAQ9BoB,MAAAA,cAAc,EAAdA,cAR8B;AAS9BC,MAAAA,kBAAkB,EAAlBA;AAT8B,KAAlC;AAAA,cAWK5B;AAXL;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH;;GAjFeD,iB;;KAAAA,iB","sourcesContent":["import {createContext, useState,ReactNode, useEffect} from 'react';\r\nimport Cookies from 'js-cookie';\r\nimport challenges from '../../challenges.json';\r\n\r\n\r\ninterface Challenge {\r\n    type:'body'|'eye';\r\n    description:string;\r\n    amount:number;\r\n}\r\n\r\ninterface ChallengesContextData {\r\n    level:number;\r\n    currentExperience:number;\r\n    experienceToNextLevel:number;\r\n    challengesCompleted:number;\r\n    activeChallenge:Challenge;\r\n    levelUp:()=>void;\r\n    startNewChallenge:()=>void;\r\n    resetChallenge:()=>void;\r\n    completedChallenge:()=>void;\r\n}\r\n\r\ninterface ChallengeProviderProps{\r\n    children:ReactNode;\r\n    level:number;\r\n    currentExperience:number;\r\n    challengesCompleted:number;\r\n      \r\n}\r\n\r\n\r\n\r\nexport const ChallengeContext = createContext({}as ChallengesContextData);\r\n\r\nexport function ChallengeProvider({children}){\r\n    const [level,setLevel]=useState(1);\r\n    const[currentExperience,setCurrentExperience]=useState(0);\r\n    const[challengesCompleted,setChallengesCompleted]=useState(0);\r\n\r\n    const[activeChallenge,setActiveChallenge]= useState(null)\r\n\r\n    const experienceToNextLevel = Math.pow((level + 1)*4,2)\r\n\r\n\r\n    useEffect(()=>{\r\n        Notification.requestPermission();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        Cookies.set('level',String(level));\r\n        Cookies.set('currentExperience',String(currentExperience));\r\n        Cookies.set('challengesCompleted',String(challengesCompleted));\r\n\r\n    },[level,currentExperience,challengesCompleted]);\r\n\r\n  function levelUp(){\r\n    setLevel (level+ 1);\r\n  }\r\n\r\n  function startNewChallenge(){\r\n      const randomChallengeIndex=(Math.random()*challenges.length);\r\n      const challenge = challenges[randomChallengeIndex];\r\n\r\n      setActiveChallenge(challenge)\r\n\r\n      new Audio('/notification.mp3').play();\r\n\r\n      if(Notification.permission=== 'granted'){\r\n          new Notification ('Novo desafio ',{\r\n              body:`Valendo ${challenge.amount}.xp`\r\n          })\r\n      }\r\n  }\r\n\r\n  function resetChallenge(){\r\n      setActiveChallenge(null);\r\n  }\r\n\r\n  function completedChallenge()\r\n  {\r\n    if(!activeChallenge){\r\n        return;\r\n    }\r\n\r\n    const{amount}=activeChallenge;\r\n\r\n    let finalExperience = currentExperience + amount;\r\n\r\n    if(finalExperience>= experienceToNextLevel){\r\n        finalExperience = finalExperience - experienceToNextLevel;\r\n        levelUp();\r\n    }\r\n\r\n    setCurrentExperience(finalExperience);\r\n    setActiveChallenge(null);\r\n    setChallengesCompleted(challengesCompleted + 1);\r\n\r\n  }\r\n\r\n    return(\r\n        <ChallengeContext.Provider value={{\r\n            level,\r\n            currentExperience,\r\n            experienceToNextLevel,\r\n            challengesCompleted,\r\n            levelUp,\r\n            startNewChallenge,\r\n            activeChallenge,\r\n            resetChallenge,\r\n            completedChallenge,\r\n            }}>\r\n            {children}\r\n        </ChallengeContext.Provider>\r\n\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}