{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\brn93\\\\moveit-netx2\\\\src\\\\contexts\\\\ChallengeContext.tsx\";\nimport { createContext, useState, useEffect } from 'react';\nimport challenges from '../../challenges.json';\nexport const ChallengeContext = /*#__PURE__*/createContext({});\nexport function ChallengeProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.random() * challenges.length;\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n    new Audio('/notification.mp3').play();\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo desafio ', {\n        body: `Valendo ${challenge.amount}.xp`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completedChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengeContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      experienceToNextLevel,\n      challengesCompleted,\n      levelUp,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      completedChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/brn93/moveit-netx2/src/contexts/ChallengeContext.tsx"],"names":["createContext","useState","useEffect","challenges","ChallengeContext","ChallengeProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","levelUp","startNewChallenge","randomChallengeIndex","random","length","challenge","Audio","play","permission","body","amount","resetChallenge","completedChallenge","finalExperience"],"mappings":";;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,EAA2CC,SAA3C,QAA2D,OAA3D;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AA0BA,OAAO,MAAMC,gBAAgB,gBAAGJ,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,SAASK,iBAAT,CAA2B;AAACC,EAAAA;AAAD,CAA3B,EAAsC;AACzC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAOC;AAAP,MAAiBP,QAAQ,CAAC,CAAD,CAA/B;AACA,QAAK;AAAA,OAACQ,iBAAD;AAAA,OAAmBC;AAAnB,MAAyCT,QAAQ,CAAC,CAAD,CAAtD;AACA,QAAK;AAAA,OAACU,mBAAD;AAAA,OAAqBC;AAArB,MAA6CX,QAAQ,CAAC,CAAD,CAA1D;AAEA,QAAK;AAAA,OAACY,eAAD;AAAA,OAAiBC;AAAjB,MAAsCb,QAAQ,CAAC,IAAD,CAAnD;AAEA,QAAMc,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAY,CAArB,EAAuB,CAAvB,CAA9B;AAGAL,EAAAA,SAAS,CAAC,MAAI;AACVgB,IAAAA,YAAY,CAACC,iBAAb;AACH,GAFQ,EAEN,EAFM,CAAT;;AAIF,WAASC,OAAT,GAAkB;AAChBZ,IAAAA,QAAQ,CAAED,KAAK,GAAE,CAAT,CAAR;AACD;;AAED,WAASc,iBAAT,GAA4B;AACxB,UAAMC,oBAAoB,GAAEN,IAAI,CAACO,MAAL,KAAcpB,UAAU,CAACqB,MAArD;AACA,UAAMC,SAAS,GAAGtB,UAAU,CAACmB,oBAAD,CAA5B;AAEAR,IAAAA,kBAAkB,CAACW,SAAD,CAAlB;AAEA,QAAIC,KAAJ,CAAU,mBAAV,EAA+BC,IAA/B;;AAEA,QAAGT,YAAY,CAACU,UAAb,KAA2B,SAA9B,EAAwC;AACpC,UAAIV,YAAJ,CAAkB,eAAlB,EAAkC;AAC9BW,QAAAA,IAAI,EAAE,WAAUJ,SAAS,CAACK,MAAO;AADH,OAAlC;AAGH;AACJ;;AAED,WAASC,cAAT,GAAyB;AACrBjB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASkB,kBAAT,GACA;AACE,QAAG,CAACnB,eAAJ,EAAoB;AAChB;AACH;;AAED,UAAK;AAACiB,MAAAA;AAAD,QAASjB,eAAd;AAEA,QAAIoB,eAAe,GAAGxB,iBAAiB,GAAGqB,MAA1C;;AAEA,QAAGG,eAAe,IAAGlB,qBAArB,EAA2C;AACvCkB,MAAAA,eAAe,GAAGA,eAAe,GAAGlB,qBAApC;AACAK,MAAAA,OAAO;AACV;;AAEDV,IAAAA,oBAAoB,CAACuB,eAAD,CAApB;AACAnB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AAED;;AAEC,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAC9BJ,MAAAA,KAD8B;AAE9BE,MAAAA,iBAF8B;AAG9BM,MAAAA,qBAH8B;AAI9BJ,MAAAA,mBAJ8B;AAK9BS,MAAAA,OAL8B;AAM9BC,MAAAA,iBAN8B;AAO9BR,MAAAA,eAP8B;AAQ9BkB,MAAAA,cAR8B;AAS9BC,MAAAA;AAT8B,KAAlC;AAAA,cAWK1B;AAXL;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH","sourcesContent":["import {createContext, useState,ReactNode, useEffect} from 'react';\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface Challenge {\r\n    type:'body'|'eye';\r\n    description:string;\r\n    amount:number;\r\n}\r\n\r\ninterface ChallengesContextData {\r\n    level:number;\r\n    currentExperience:number;\r\n    experienceToNextLevel:number;\r\n    challengesCompleted:number;\r\n    activeChallenge:Challenge;\r\n    levelUp:()=>void;\r\n    startNewChallenge:()=>void;\r\n    resetChallenge:()=>void;\r\n    completedChallenge:()=>void;\r\n}\r\n\r\ninterface ChallengeProviderProps{\r\n    children:ReactNode;\r\n}\r\n\r\n\r\n\r\nexport const ChallengeContext = createContext({}as ChallengesContextData);\r\n\r\nexport function ChallengeProvider({children}){\r\n    const [level,setLevel]=useState(1);\r\n    const[currentExperience,setCurrentExperience]=useState(0);\r\n    const[challengesCompleted,setChallengesCompleted]=useState(0);\r\n\r\n    const[activeChallenge,setActiveChallenge]= useState(null)\r\n\r\n    const experienceToNextLevel = Math.pow((level + 1)*4,2)\r\n\r\n\r\n    useEffect(()=>{\r\n        Notification.requestPermission();\r\n    }, [])\r\n\r\n  function levelUp(){\r\n    setLevel (level+ 1);\r\n  }\r\n\r\n  function startNewChallenge(){\r\n      const randomChallengeIndex=(Math.random()*challenges.length);\r\n      const challenge = challenges[randomChallengeIndex];\r\n\r\n      setActiveChallenge(challenge)\r\n\r\n      new Audio('/notification.mp3').play();\r\n\r\n      if(Notification.permission=== 'granted'){\r\n          new Notification ('Novo desafio ',{\r\n              body:`Valendo ${challenge.amount}.xp`\r\n          })\r\n      }\r\n  }\r\n\r\n  function resetChallenge(){\r\n      setActiveChallenge(null);\r\n  }\r\n\r\n  function completedChallenge()\r\n  {\r\n    if(!activeChallenge){\r\n        return;\r\n    }\r\n\r\n    const{amount}=activeChallenge;\r\n\r\n    let finalExperience = currentExperience + amount;\r\n\r\n    if(finalExperience>= experienceToNextLevel){\r\n        finalExperience = finalExperience - experienceToNextLevel;\r\n        levelUp();\r\n    }\r\n\r\n    setCurrentExperience(finalExperience);\r\n    setActiveChallenge(null);\r\n    setChallengesCompleted(challengesCompleted + 1);\r\n\r\n  }\r\n\r\n    return(\r\n        <ChallengeContext.Provider value={{\r\n            level,\r\n            currentExperience,\r\n            experienceToNextLevel,\r\n            challengesCompleted,\r\n            levelUp,\r\n            startNewChallenge,\r\n            activeChallenge,\r\n            resetChallenge,\r\n            completedChallenge,\r\n            }}>\r\n            {children}\r\n        </ChallengeContext.Provider>\r\n\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}