{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\brn93\\\\moveit-netx2\\\\src\\\\contexts\\\\ChallengeContext.tsx\";\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport const ChallengeContext = /*#__PURE__*/createContext({});\nexport function ChallengeProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.random() * challenges.length;\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengeContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      levelUp,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/brn93/moveit-netx2/src/contexts/ChallengeContext.tsx"],"names":["createContext","useState","challenges","ChallengeContext","ChallengeProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","levelUp","startNewChallenge","randomChallengeIndex","Math","random","length","challenge","resetChallenge"],"mappings":";;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,QAAgD,OAAhD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAwBA,OAAO,MAAMC,gBAAgB,gBAAGH,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,SAASI,iBAAT,CAA2B;AAACC,EAAAA;AAAD,CAA3B,EAAsC;AACzC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAOC;AAAP,MAAiBN,QAAQ,CAAC,CAAD,CAA/B;AACA,QAAK;AAAA,OAACO,iBAAD;AAAA,OAAmBC;AAAnB,MAAyCR,QAAQ,CAAC,CAAD,CAAtD;AACA,QAAK;AAAA,OAACS,mBAAD;AAAA,OAAqBC;AAArB,MAA6CV,QAAQ,CAAC,CAAD,CAA1D;AAEA,QAAK;AAAA,OAACW,eAAD;AAAA,OAAiBC;AAAjB,MAAsCZ,QAAQ,CAAC,IAAD,CAAnD;;AAEF,WAASa,OAAT,GAAkB;AAChBP,IAAAA,QAAQ,CAAED,KAAK,GAAE,CAAT,CAAR;AACD;;AAED,WAASS,iBAAT,GAA4B;AACxB,UAAMC,oBAAoB,GAAEC,IAAI,CAACC,MAAL,KAAchB,UAAU,CAACiB,MAArD;AACA,UAAMC,SAAS,GAAGlB,UAAU,CAACc,oBAAD,CAA5B;AAEAH,IAAAA,kBAAkB,CAACO,SAAD,CAAlB;AACH;;AAED,WAASC,cAAT,GAAyB;AACrBR,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAEC,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAC9BP,MAAAA,KAD8B;AAE9BE,MAAAA,iBAF8B;AAG9BE,MAAAA,mBAH8B;AAI9BI,MAAAA,OAJ8B;AAK9BC,MAAAA,iBAL8B;AAM9BH,MAAAA,eAN8B;AAO9BS,MAAAA;AAP8B,KAAlC;AAAA,cASKhB;AATL;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH","sourcesContent":["import {createContext, useState,ReactNode} from 'react';\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface Challenge {\r\n    type:'body'|'eye';\r\n    description:string;\r\n    amount:number;\r\n}\r\n\r\ninterface ChallengesContextData {\r\n    level:number;\r\n    currentExperience:number;\r\n    challengesCompleted:number;\r\n    activeChallenge:Challenge;\r\n    levelUp:()=>void;\r\n    startNewChallenge:()=>void;\r\n    resetChallenge:()=>void;\r\n}\r\n\r\ninterface ChallengeProviderProps{\r\n    children:ReactNode;\r\n}\r\n\r\n\r\n\r\nexport const ChallengeContext = createContext({}as ChallengesContextData);\r\n\r\nexport function ChallengeProvider({children}){\r\n    const [level,setLevel]=useState(1);\r\n    const[currentExperience,setCurrentExperience]=useState(0);\r\n    const[challengesCompleted,setChallengesCompleted]=useState(0);\r\n\r\n    const[activeChallenge,setActiveChallenge]= useState(null)\r\n\r\n  function levelUp(){\r\n    setLevel (level+ 1);\r\n  }\r\n\r\n  function startNewChallenge(){\r\n      const randomChallengeIndex=(Math.random()*challenges.length);\r\n      const challenge = challenges[randomChallengeIndex];\r\n\r\n      setActiveChallenge(challenge)\r\n  }\r\n\r\n  function resetChallenge(){\r\n      setActiveChallenge(null);\r\n  }\r\n\r\n    return(\r\n        <ChallengeContext.Provider value={{\r\n            level,\r\n            currentExperience,\r\n            challengesCompleted,\r\n            levelUp,\r\n            startNewChallenge,\r\n            activeChallenge,\r\n            resetChallenge,\r\n            }}>\r\n            {children}\r\n        </ChallengeContext.Provider>\r\n\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}